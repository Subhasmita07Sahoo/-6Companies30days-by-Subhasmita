Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.


Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]


class Solution {
    public List<Integer> largestDivisibleSubset(int[] arr) {
        
        int n = arr.length;
        int[] dp = new int[n];
        int[] hash = new int[n];
        int maxi = 1;
        int lastIndex = 0;
        
        Arrays.sort(arr);

        // Initialize dp and hash arrays
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            hash[i] = i;
        }

        // Compute LIS
        for (int i = 0; i < n; i++) 
        {
            for (int prev = 0; prev < i; prev++)
            {
                if (arr[i] % arr[prev] == 0 && dp[prev] + 1 > dp[i]) 
                {
                    dp[i] = dp[prev] + 1;
                    hash[i] = prev;
                }
            }
            
            if (dp[i] > maxi)
            {
                maxi = dp[i];
                lastIndex = i;
            }
        }

        // Reconstruct LIS sequence
        List<Integer> temp = new ArrayList<>();
        temp.add(arr[lastIndex]);
        
        while (hash[lastIndex] != lastIndex) 
        {
            lastIndex = hash[lastIndex];
            temp.add(arr[lastIndex]);
        }
        Collections.reverse(temp);
        
        return temp ;
    }
}
