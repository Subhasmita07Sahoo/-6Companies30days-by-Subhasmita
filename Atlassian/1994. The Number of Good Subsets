You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.

For example, if nums = [1, 2, 3, 4]:
[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.
[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.
Return the number of different good subsets in nums modulo 109 + 7.

A subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 6
Explanation: The good subsets are:
- [1,2]: product is 2, which is the product of distinct prime 2.
- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [1,3]: product is 3, which is the product of distinct prime 3.
- [2]: product is 2, which is the product of distinct prime 2.
- [2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [3]: product is 3, which is the product of distinct prime 3.


class Solution {
    private static final int mod = (int) 1e9 + 7;
    private static int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
    private Long[][] dp;

    public int numberOfGoodSubsets(int[] nums) {
        Map<Integer,Integer> count = new HashMap<>();
        for(int num : nums) count.put(num, count.getOrDefault(num, 0) + 1);
        Integer[] arr = count.keySet().toArray(Integer[]::new);
        int n = arr.length;
        dp = new Long[n][1024];
        long ans = solve(0, 0, arr, n, count) - 1;
        return (int) (ans * binaryExp(2, count.getOrDefault(1, 0)) % mod);
    }

    private long solve(int idx, int primeMask, Integer[] nums, int n, Map<Integer,Integer> count) {
        if(idx == n) return 1;
        if(dp[idx][primeMask] != null) return dp[idx][primeMask];
        int num = nums[idx];
        long notPick = solve(idx + 1, primeMask, nums, n, count);
        long pick = 0;
        if(num != 1) {
            int newPrimeMask = getPrimeMask(num, primes);
            if(num % 4 != 0 && num % 9 != 0 && num % 25 != 0
            && (primeMask & newPrimeMask) == 0) {
                pick = solve(idx + 1, primeMask | newPrimeMask, nums, n, count) * count.get(num) % mod;
            }
        }
        return dp[idx][primeMask] = pick + notPick;
    }

    private int getPrimeMask(int num, int[] primes) {
        int mask = 0;
        int len = primes.length;
        for(int i = 0; i < len; i++) {
            if(num % primes[i] == 0) {
                mask |= 1 << i;
            }
        }
        return mask;
    }

    private long binaryExp(long x, int y) {
        if(y == 0) return 1;
        if(y % 2 == 1) {
            return x * binaryExp(x, y - 1) % mod;
        }
        return binaryExp(x * x % mod, y / 2);
    }
}
