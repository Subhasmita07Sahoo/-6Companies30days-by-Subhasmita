You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:

Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.

Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Note: The answer should be the minimum product before the modulo operation is done.

Example 1:

Input: p = 1
Output: 1
Explanation: nums = [1].
There is only one element, so the product equals that element.
Example 2:

Input: p = 2
Output: 6
Explanation: nums = [01, 10, 11].
Any swap would either make the product 0 or stay the same.
Thus, the array product of 1 * 2 * 3 = 6 is already minimized.


class Solution {
	public int minNonZeroProduct(int p) {
		long N = (long)Math.pow(10,9) + 7;
		long max = (long)Math.pow(2,p) - 1;
		long power = pow(max -1 , (max -1)/2);
		power = ((power %N) * ( max%N)) %N;
		return (int)power;
	}
	private long pow(long num,long p){
		if(p == 0)
			return 1l;

		long N = (long)Math.pow(10,9) + 7;
		long temp = pow(num, p/2);
		temp = temp % N;
		if(p%2 == 0){
			return (temp * temp)%N;
		}else{
			return (((temp * temp)%N) * (num%N))%N;
		}
	}
}
