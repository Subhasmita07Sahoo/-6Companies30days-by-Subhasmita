You are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1.
Return the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. Note that you should maximize the product before taking the modulo. 

Example 1:

Input: nums = [0,4], k = 5
Output: 20
Explanation: Increment the first number 5 times.
Now nums = [5, 4], with a product of 5 * 4 = 20.
It can be shown that 20 is maximum product possible, so we return 20.
Note that there may be other ways to increment nums to have the maximum product.



class Solution {
    public int maximumProduct(int[] nums, int k) {
        
        PriorityQueue<Integer> numPQ = new PriorityQueue<>();
        int mod = 1000000007;

        //Add all elements into priority queue
        for (int num : nums)
            numPQ.offer(num);

        for (int i = 0; i < k; i++) 
        {
            // Get the minimum element and increment by 1
            int minElement = numPQ.remove();
            minElement++;

            // Add it back to the priority queue
            numPQ.offer(minElement);
        }

        // Find the product
        long result = 1;
        while (!numPQ.isEmpty())
        {
            result *= numPQ.poll();
            result %= mod;
        }

        return (int) result;
    }
}
