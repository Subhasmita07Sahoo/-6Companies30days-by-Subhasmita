You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.

For example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc.
The score of si is the length of the longest common prefix between si and sn (Note that s == sn).

Given the final string s, return the sum of the score of every si.

Example 1:

Input: s = "babab"
Output: 9
Explanation:
For s1 == "b", the longest common prefix is "b" which has a score of 1.
For s2 == "ab", there is no common prefix so the score is 0.
For s3 == "bab", the longest common prefix is "bab" which has a score of 3.
For s4 == "abab", there is no common prefix so the score is 0.
For s5 == "babab", the longest common prefix is "babab" which has a score of 5.
The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.


class Solution {
    // calculate Z array

public int[] calculateZ(char[] input) {

	int[] Z = new int[input.length];

	int left = 0, right = 0;

	for (int i = 1; i < input.length; i++) {

		if (i > right) {

			left = right = i;

			while (right < input.length && input[right] == input[right - left]) {

				right++;

			}

			Z[i] = right - left;

			right--;

		} else {

			int k = i - left;

			if (Z[k] < right - i + 1) {

				Z[i] = Z[k];

			} else {

				left = i;

				while (right < input.length && input[right] == input[right - left]) {

					right++;

				}

				Z[i] = right - left;

				right--;

			}

		}

	}

	return Z;

}

public long sumScores(String s) {

	int[] z = calculateZ(s.toCharArray());

	long sum = 0;

	for(int el: z)

		sum += el;

	sum += s.length();

	return sum;

}
}
