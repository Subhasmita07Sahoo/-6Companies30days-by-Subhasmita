Given an array arr[] of length n used to denote the dimensions of a series of matrices such that the dimension of i'th matrix is arr[i] * arr[i+1]. There are a total of n-1 matrices. Find the most efficient way to multiply these matrices together. 
As in MCM, you were returning the most effective count but this time return the string which is formed of A - Z (only Uppercase) denoting matrices & Brackets( "(" ")" ) denoting multiplication symbols. For example, if n =11, the matrixes can be denoted as A - K as n<=26 & brackets as multiplication symbols.

NOTE:

Each multiplication is denoted by putting open & closed brackets to the matrices multiplied & also, please note that the order of matrix multiplication matters, as matrix multiplication is non-commutative A*B != B*A
As there can be multiple possible answers, the console would print "true" for the correct string and "false" for the incorrect string. You need to only return a string that performs a minimum number of multiplications.
Examples:

Input: arr[] = [40, 20, 30, 10, 30]
Output: true
Explanation: Let's divide this into matrix(only 4 are possible) [ [40, 20] -> A, [20, 30] -> B, [30, 10] ->C, [10, 30] -> D ]
First we perform multiplication of B & C -> (BC), then we multiply A to (BC) -> (A(BC)), then we multiply D to (A(BC)) -> ((A(BC))D)
so the solution returned the string ((A(BC))D), which performs minimum multiplications. The total number of multiplications are 20*30*10 + 40*20*10 + 40*10*30 = 26,000.
Input: arr[] = [10, 20, 30]
Output: true
Explanation: There is only one way to multiply two matrices: (AB): The cost for the multiplication will be 6000
Input: arr = [3, 3, 3]
Output: true
Explanation: The solution returned the string (AB), which performs minimum multiplications. The total number of multiplications are (3*3*3) = 27.


class Solution {
    static String str = "";
    static char name = 'A';

    static String matrixChainOrder(int arr[]) {
        int n = arr.length;
        str = "";
        name = 'A';
        int[][] dp = new int[n][n];
        int[][] bracket = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }

        solve(arr, 1, n - 1, dp, bracket);
        printOptimalParenthesis(1, n - 1, bracket);
        return str;
    }

    public static void printOptimalParenthesis(int i, int j, int[][] memoization) {
        if (i == j) {
            str = str + name;
            name++;
        } else {
            int k = memoization[i][j];
            str = str + "(";
            printOptimalParenthesis(i, k, memoization);
            printOptimalParenthesis(k + 1, j, memoization);
            str = str + ")";
        }
    }

    static int solve(int[] arr, int i, int j, int[][] dp, int[][] bracket) {
        if (i >= j) {
            return 0;
        }

        if (dp[i][j] != -1) return dp[i][j];
        int min = Integer.MAX_VALUE;
        for (int k = i; k < j; k++) {
            int temp = solve(arr, i, k, dp, bracket) +
                       solve(arr, k + 1, j, dp, bracket) + arr[i - 1] * arr[k] * arr[j];
            if (min > temp) {
                min = Math.min(min, temp);
                dp[i][j] = min;
                bracket[i][j] = k;
            }
        }
        return min;
    }
}
