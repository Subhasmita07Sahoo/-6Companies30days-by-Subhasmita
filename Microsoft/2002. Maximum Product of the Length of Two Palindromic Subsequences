Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.
Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

Example 1:
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9

**************************************************************************************************JAVA**************************************************************************************************************************
TC:- O(2^n * n)
SC:- O(n*m)

class Solution {
    public int maxProduct(String s) {
        
        int n = s.length();
        int ans = 0;

        for (int num = 0; num < (1 << n); num++) 
        {
            StringBuilder x = new StringBuilder();
            StringBuilder y = new StringBuilder();

            for (int i = 0; i < n; i++)
             {
                if ((num & (1 << i)) != 0) {
                    x.append(s.charAt(i));
                } else {
                    y.append(s.charAt(i));
                }
            }

            ans = Math.max(ans, answer(x.toString()) * answer(y.toString()));
        }

        return ans;
    }

    public int answer(String s) 
    {
        StringBuilder ss = new StringBuilder(s);
        ss.reverse();
        return lcs(s, ss.toString());
    }

    public int lcs(String a, String b)
    {
        int n = a.length(), m = b.length();
        int[][] dp = new int[n + 1][m + 1];
        
        for (int i = 0; i <= n; i++)
         {
            for (int j = 0; j <= m; j++) 
            {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                } else if (a.charAt(i - 1) == b.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[n][m];
    }

}
