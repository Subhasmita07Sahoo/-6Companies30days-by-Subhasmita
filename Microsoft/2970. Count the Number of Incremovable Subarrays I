You are given a 0-indexed array of positive integers nums.
A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] 
because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] 
which is strictly increasing.Return the total number of incremovable subarrays of nums.Note that an empty array is considered strictly increasing.A subarray is a contiguous non-empty 
sequence of elements within an array.

Input: nums = [1,2,3,4]
Output: 10
Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes 
strictly increasing. Note that you cannot select an empty subarray.



****************************************************************************************JAVA**************************************************************************************
TC:- O(n^3)
SC:- O(1)

class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int count = 0;
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            for (int j = i; j < len; j++) {
                if (isIncreasingSubArray(nums, i, j)) {
                    count++;
                }
            }
        }
        return count;
    }

    public boolean isIncreasingSubArray(int[] nums, int start, int end) {
        int len = nums.length;
        int prev = 0;
        for (int i = 0; i < len; i++) {
            if (i >= start && i <= end) {
                continue;
            }
            if (nums[i] <= prev) {
                return false;
            }
            prev = nums[i];
        }
        return true;
    }
}
